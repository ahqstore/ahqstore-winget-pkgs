{"appId":"winget_app_Miller.Miller","appShortcutName":"Winget Application","appDisplayName":"Miller","authorId":"winget","releaseTagName":"winget-6.12.0","downloadUrls":{"0":{"installerType":"WindowsInstallerMsi","asset":"","url":"https://github.com/microsoft/winget-pkgs/releases/download/winget-6.12.0/"},"1":{"installerType":"WindowsInstallerMsi","asset":"","url":"https://github.com/microsoft/winget-pkgs/releases/download/winget-6.12.0/"}},"install":{"win32":null,"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":null},"displayImages":[],"description":"Miller is like awk, sed, cut, join, and sort for name-indexed data such as CSV, TSV, and tabular JSON\n\nMiller is like awk, sed, cut, join, and sort for name-indexed data such as CSV, TSV, and tabular JSON. You get to work with your data using named fields, without needing to count positional column indices.\n\nThis is something the Unix toolkit always could have done, and arguably always should have done. It operates on key-value-pair data while the familiar Unix tools operate on integer-indexed fields: if the natural data structure for the latter is the array, then Miller’s natural data structure is the insertion-ordered hash map. This encompasses a variety of data formats, including but not limited to the familiar CSV, TSV, and JSON. (Miller can handle positionally-indexed data as a special case.)\n\n## Features\n\n- Miller is multi-purpose: it’s useful for data cleaning, data reduction, statistical reporting, devops, system administration, log-file processing, format conversion, and database-query post-processing.\n- You can use Miller to snarf and munge log-file data, including selecting out relevant substreams, then produce CSV format and load that into all-in-memory/data-frame utilities for further statistical and/or graphical processing.\n- Miller complements data-analysis tools such as R, pandas, etc.: you can use Miller to clean and prepare your data. While you can do basic statistics entirely in Miller, its streaming-data feature and single-pass algorithms enable you to reduce very large data sets.\n- Miller complements SQL databases: you can slice, dice, and reformat data on the client side on its way into or out of a database. (Examples here and here). You can also reap some of the benefits of databases for quick, setup-free one-off tasks when you just need to query some data in disk files in a hurry.\n- Miller also goes beyond the classic Unix tools by stepping fully into our modern, no-SQL world: its essential record-heterogeneity property allows Miller to operate on data where records with different schema (field names) are interleaved.\n- Miller is streaming: most operations need only a single record in memory at a time, rather than ingesting all input before producing any output. For those operations which require deeper retention (sort, tac, stats1), Miller retains only as much data as needed. This means that whenever functionally possible, you can operate on files which are larger than your system’s available RAM, and you can use Miller in tail -f contexts.\n- Miller is pipe-friendly and interoperates with the Unix toolkit\n- Miller’s I/O formats include tabular pretty-printing, positionally indexed (Unix-toolkit style), CSV, JSON, and others\n- Miller does conversion between formats\n- Miller’s processing is format-aware: e.g. CSV sort and tac keep header lines first\n- Miller has high-throughput performance on par with the Unix toolkit\n- Not unlike jq (for JSON), Miller is written in portable, modern C, with zero runtime dependencies. You can download or compile a single binary, scp it to a faraway machine, and expect it to work.\n","repo":{"author":"microsoft","repo":"winget-pkgs"},"version":"6.12.0","site":"https://github.com/johnkerl","source":"WinGet","license_or_tos":"BSD-2-Clause","app_page":"https://github.com/johnkerl/miller","resources":null}